/* return maximum from two I64 numbers */
pub fn max_2_I64 {
  1 pushnth 1 pushnth < :max_2_I64_less if
  0 dropnth 1 nbrot #()
fn max_2_I64_less
  1 dropnth 1 nbrot #()
}

/* return minimum from two I64 numbers */
pub fn min_2_I64 {
  1 pushnth 1 pushnth < :min_2_I64_more if
  1 dropnth 1 nbrot #()
fn min_2_I64_more
  0 dropnth 1 nbrot #()
}

/* convert signed number to unsigned */
pub fn I64ToU64
  -9223372036854775807 +
  1 nbrot #()

/* convert unsigned number to signed */
pub fn U64ToI64
  9223372036854775807 +
  1 nbrot #()

/* copy a vector (or a string) */
pub fn veccpy /* *abc3 */ {
  0
  :#veccpy_loop()
fn veccpy_loop 1 +
  1 pushnth 1 pushnth -- + 2 + pushnth 2 pushnth 2 + nbrot
  0 pushnth 2 pushnth < ! :veccpy_end if
  :#veccpy_loop()
fn veccpy_end
  0 pushnth 1 + nbrot
  0 pushnth 2 * 2 + pushnth 1 nbrot
  0 pushnth 2 * 3 + dropnth 1 nbrot
  #()
}

/*
 * dereference a pointer and keep it in data
 * Example:
 *  "abc" ->>
 * Stack:
 *  {length}
 * Data:
 *  {string} {length}
 */
pub fn ->> 1 nbrot
  -> 0 pushnth <- 0 dropnth
1 nbrot #()

/* throw a string from a pointer */
pub fn ->vec {
  1 nbrot 0 pushnth -> 0
  #->vec_loop
fn ->vec_loop
  1 +
  2 pushnth 1 pushnth -- + -> 3 nbrot
  0 pushnth 2 pushnth < ! :->vec_end if
  #->vec_loop
fn ->vec_end
  2 dropnth 0 dropnth
  0 pushnth 1 + pushnth
  1 pushnth 2 + dropnth #()
}

/*
 * reference a value to data and keep it in the stack
 */
pub fn <<- 1 nbrot
  0 pushnth <- 2 pushnth 3 dropnth #()

/* put a string from stack to data and reverse it (intrinsic) */
pub fn <-rev_vec {
  1 pushnth 1 + nbrot
  0
  #<-rev_vec_loop
fn <-rev_vec_loop
  1 +
  1 pushnth 1 pushnth -- + 3 + 0 pushnth pushnth
  1 nbrot dropnth
  <- 0 dropnth
  0 pushnth 2 pushnth < ! :<-rev_vec_end if
  #<-rev_vec_loop
fn <-rev_vec_end
  0 dropnth <- 1 nbrot #()

/* put a string from stack to data */
pub fn <-vec {
'Z <- 0 dropnth
  1 pushnth 1 + nbrot
  0
  #<-vec_loop
fn <-vec_loop
  1 +
  2 pushnth 3 dropnth
  <- 0 dropnth
  0 pushnth 2 pushnth < ! :<-vec_end if
  #<-vec_loop
fn <-vec_end
  0 dropnth <- 1 nbrot #()
}
